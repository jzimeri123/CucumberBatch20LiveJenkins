class 1 live -

create maven project
give name to group id and  artifact id

cucumber starts from -

firstly, we write test case/scenario
secondly, generate step definitions
 rules to remember -
  every step definition should be unique
  after generating step def, we cannot add anything in feature file
  we can reuse all the steps in feature file but we cannot add step def in every class

background -

till the time flow is same in all the common steps for the scenarios in one feature

hooks -

rule - it has just 2 tags - @before @after
it will be available always under steps package

first - hooks will be executed then background will be executed and then
scenario will be executed

class 2 live -

recap
cucumber as a tool -
feature file - user story - test cases - every scenario is considered as one test case
step definitions - here we write the code for executing the test cases
runner class - cucumber options -
    features - the path of features directory/file
    glue - the path of the step definition package
    dry run - to generate missing step definition, we set the value of it to true
    tags - for batch execution we use tags
    plugin - pretty - to print all the step definitions in the console

background - when all the scenarios of one feature file having common steps, till the flow is not broken
we can keep all these common steps in background
once the flow is broken, we cant keep steps in background

hooks - pre-condition and post condition of all the feature files
@Before - pre-condition
@After - post-condition

hooks class should be implemented in steps package

parameterization testing -
pass parameters from the script
data driven testing - when one test case executes against multiple sets of data

maven - build management tool

src - main, test

test - java & resources  (for java and non-java stuff)

separate packages for similar classes
separate directories for similar files

framework should be scalable
framework should be easily managed
framework should be able to reuse the code
nothing should be passed hardcoded

class 3 live -

implement framework -
cucumber/BDD framework
it supports Data driven testing
hybrid framework -

framework is all about standard skeleton and folder structure

framework supports cross browser testing
framework supports cross platform testing

POM design pattern -

as per POM, we should create separate page class for every screen of  the page

all the reports in execution can be found under target folder

validation of script -

Assertion -
    if your script validation is failed, it will stop the execution
    it will give you the error message too

    there are 2 types of assertion we use,
    check the presence of element/field/data - boolean
    check the data is correct or not (expected, actual)

pom.xml file - backbone of the project
when we execute the code
-- test the code
   install
   compile
   verify
   test

-----------------------------------------
API

REST Assured follows behavioral driven development approach

Given-prepare the request
When-making the call/sending the request/hitting the end point
Then-validation of response

Hamcrest marchers-
it allows us to validate the key vs value combination using native methods

equalTo() is a native method we generally use












